CSCI 101 provides an overview of the fundamentals of computer science. Number systems and data representation are introduced. An overview of hardware, including the control unit, memory, the ALU, and I/O is provided. Software is introduced with an overview of operating systems, programming languages, applications, and software tools. Students are exposed to common operating systems and applications. Student also design and implement several programs.
This course explores the impact of technology on our lives. Aspects of our complex technological society are investigated through study of the various forms technology takes, and readings in contemporary literature regarding the impact these technologies have on individuals. Students are encouraged to reflect on technology in their own lives through journaling, and to discourse with their peers on the benefits and harm to individuals, society, and humanity that modern technology presents.
A first-semester programming course, providing an overview of computer systems and an introduction to problem solving and software design using procedural object-oriented programming languages. Coverage includes the software life cycle, as well as algorithms and their role in software design. Students are expected to design, implement, and test a number of programs.
A comprehensive introduction to using the UNIX/Linux operating system and the Windows based Cygwin Linux emulator. The course includes hands-on experience with commands, files, and tools. Topics include basic UNIX/Linux commands, filename expansion, command history, command editing, using the UNIX file system (files, file protection, directories), I/O redirection, network utilities, text utlities (editors, office tools), managing processes, pipes, regular expressions, basic shell programming, and advanced utilities (sed, grep, awk).
A second semester object-oriented programming course in computer science that emphasizes problem solving. This course continues the study of software specification, design, implementation, and debugging techniques while introducing abstract data types, fundamental data structures and associated algorithms. Coverage includes dynamic memory, file I/O, linked lists, stacks, queues, trees, recursion, and an introduction to the complexity of algorithms. Students are expected to design, implement, test, and analyze a number of programs.
Offers an intensive introduction to discrete mathematics as it is used in computer science. Topics include functions, relations, sets, propositional and predicate logic, simple circuit logic, proof techniques, elementary combinatorics, and discrete probability.
Topics include number systems and their rules for arithmetic; basic central processing unit (CPU) organization concepts such as registers, data paths, the arithmetic and logic unit (ALU) and the interface to random access memory (RAM); instruction formats, addressing modes and their uses with a variety of data structures; and parameter passing techniques including the use of a stack frame. The use of good programming methodologies to develop and document algorithms at the assembly language level is emphasized.
Impact of computers and high-tech systems on people, institutions, organizations, and environment. Examines the following: law, medicine, education, government, data banks, privacy, computer security, changing work, automation, robots, expert systems, AI, social responsibility, ethics, war, conflict resolution. Includes weekly reading, midterm, and final writing projects. Weekly lectures, discussions, films, and writing. No programming.
This course focuses on object-oriented methodologies in designing and implementing a variety of data structures and algorithms. Coverage includes recursion, trees, search structures, hashing, heaps, sorting algorithms, and graph algorithms. Data structure and algorithm combinations will be studied and analyzed along with their relative merits using both mathematical and empirical measurements. The course includes a number of large programming assignments focusing on object-oriented software engineering and algorithm development. Students will be required to design, implement, test, and analyze their programs in at least one object-oriented language.
An investigation into the structure and syntax of current programming languages, including binding, scoping, data types, transfer-of-control structures, subprograms, abstract data types, object-oriented programming, and logical and functional programming.
Operating system fundamentals, including history, process and thread management, concurrency with semaphores and monitors, deadlocks, storage management, file systems, I/O, and distributed systems.
Shell programming provides an easy means to perform a wide range of text/data manipulation, system administration, network administration, and software development tasks in the UNIX, Linux, and Windows environments. This course provides an introduction to shell programming and the types of problems for which it is well suited. Topics include regular expressions, advanced UNIX/Linux utilities, the Bash scripting language, and the Perl programming language. Students solve a variety of tasks using UNIX/Linux utilities, Bash Script, and Perl. This course is recommended for students pursing careers in software development, information technology, and information systems.
An examination of the emergence of artificial mind in machines, with special attention to related issues in the philosophy of mind and cognitive science.
This course presents a practically based treatment of artificial intelligence, and a general introduction of technical issues associated with the development of intelligent systems. The course addresses issues of knowledge representation and natural language processing in particular, from a computational perspective. Students write programs to perform simple analyses of natural language and logical reasoning. Students also explore the limits of computation, using practical and theoretical approaches.
Co-curricular activity associated with one or more student professional organizations. Examples include collegiate competitions, such as the ACM Programming Contest, and service projects.
An overview of software engineering principles and practice. Topics include: traditional software engineering methodologies, agile software engineering methodologies, requirements engineering, software design, risk analysis, quality assurance, testing, group dynamics, communication, and project planning/management. Students work in groups to design and implement a semester long software project.
An in depth look at software development tools and software engineering methodology. Topics include: agile software development, version control, static and dynamic code analysis, bug tracking, debugging, and build management. Students work in groups on a semester long project to understand and modify and existing large open source product. An agile software engineering methodology is used to manage the modification project.
This course guides students through the fundamental responsibilities of UNIX system administration. Topics include file system monitoring, file and directory archiving, user account management, shutdown and rebooting sequences, system backups, system log responsibilities, and basic system security. Projects focus on the creation of shell scripts to automate system administration tasks.
This course is an introduction to basic networking technologies and network management concepts, including major network operating systems, communication architecture focusing on ISO and Internet models with discussion of current standards and protocols. Significant laboratory work using current networking equipment reinforces lectures and provides fundamental experience with router and switch management.
This capstone course provides a culminating activity in computer science. Students will work independently to specify, design, develop, test, and document a complete software application under faculty supervision. Students present status reports at weekly meetings, and present their finished project at the end of the semester.
This class focuses on object-oriented programming using large class libraries and interactive programming environments. The course centers on good object-oriented design and implementation by addressing these issues with examples throughout the semester. Students will experience the development environment and extensively use the library of at least one object-oriented programming language. Topics include the proper use of inheritance and model/view/controller distinctions, various issues concerning multithreaded systems, I/O, exception handling, and distributed computing.
The elements of lexical, syntactical, and semantic analysis including finite and push-down automata, top-down and bottom-up parsing, error detection and recovery, semantic actions and code generation.
A hands-on project course that examines the development of systems software. It provides an introduction to writing low level programs in the UNIX/Linux environment. Topics include using system calls, processes, threads, concurrency, process/thread synchronization, signals, and interprocess communication. The course includes several large programming projects which provide students solid expericence in lower level programming.
This course covers advanced network management concepts and implementations including a network operating system, workstation management, and domain administration. Coverage also includes TCP/IP administration and router/hub management. The course provides hands-on experience on network management in a laboratory environment.
An introduction to formal languages, grammars, and automata theory with unsolvable problems.
Surveys numerical methods and parallel programming. Parallel architectures and algorithms for scientific programming applications, solution of simultaneous linear and non-linear equations, iterative techniques, matrix methods, and error analysis. Development of parallel algorithms, with a focus on efficient implementation and performance.
This course covers algorithms and data structures in computer graphics. Topics include output primitives and their attributes, 2-D and 3-D geometric transformations and viewing, 3-D object modeling, parallel and perspective projections, visible surface detection, illumination models, and rendering algorithms.
Implementation of native mobile applications using a modern framework . Topics include the model-view-controller design pattern, multi-touch event handling, sensory input handling, web service integration, multi-threading and custom user interface design.
Explores the field of digital image processing, providing an overview of its many areas of application and delving into the details of a select set of algorithms. Topics include imaging, digital images, basic image manipulation, grey level and color enhancement, neighborhood operations, the frequency domain, geometric operations, segmentation, morphological image processing, and image compression.
An introduction to the basic principles, techniques, and applications of Artificial Intelligence. Coverage includes knowledge representation, logic, inference, problem solving, search algorithms, game theory, perception, learning, planning, and agent design. Students will program with AI language tools. Additional areas may include expert systems, machine learning, natural language processing, and computer vision. 3 hours discussion.
This course introduces students to the field of robotics by emphasizing the task of endowing machines with intelligence. Topics include various case studies of robot architectures and algorithms that facilitate embodying a robot with behaviors that are traditionally associated with human cognition (e.g., perception, reasoning, intelligent navigation, vision, learning, etc.). Students conduct research and experiments with robotics hardware and software.
This course focuses on distributed computing using the object-oriented paradigm, large class libraries, and the interactive programming environment. The course is designed to prepare the student to do commercial enterprise development. Topics may include object serialization, beans, multithreading, networking, remote objects, database connectivity, servlets, and client/server programming with enterprise and application servers.
Provides a thorough and fundamental treatment of the art of computer architecture. Topics include concepts of von Neumann architectures, methods of evaluating CPU performance, instruction-set design and examples, compiler issues, instruction pipelining, superscalar processors, methods for reduction of branch penalty, memory hierarchies, I/O systems, floating-point arithmetic, and current issues in parallel processing.
In-depth study and application of the planning, design, implementation, and management of complex software systems. Topics include requirements engineering, formal specifications, object-oriented analysis, design patterns, and peopleware. Teams of students will implement a large software project using a cutting edge software engineering approach.
Further study of selected advanced topics in software engineering as presented in recently published journals; possible emphasis on research interests and/or projects of faculty in the department. Consult the Graduate Coordinator to determine how many units may be counted toward your major.
In-depth study of operating systems concepts including results from recent research. Topics may include processes, threads, virtual memory, file systems, distributed computing, scheduling, protection, and communication protocols. Students may be required to implement operating system projects.
Algorithms from many areas of computer science will be analyzed. Topics include algorithm design techniques (such as divide-and-conquer, greedy algorithms, dynamic programming, and others), mathematical and empirical analysis of algorithms and NP-completeness.
